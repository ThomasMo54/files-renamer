plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'edu.sc.seis.launch4j' version '3.0.4'
}

group 'com.motompro'
version '1.0.3'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.motompro.filesrenamer'
    mainClass = 'com.motompro.filesrenamer.FilesRenamerApplication'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '17'
    }
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

publishing {
    repositories {
        maven {
            name = "FilesRenamer"
            url = uri("https://maven.pkg.github.com/ThomasMo54/files-renamer")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.motompro.filesrenamer.MainKt'
    }
    into 'resources', {
        from 'resources'
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.compileClasspath.collect { if (it.isDirectory()) it else zipTree(it) }
    }
}

launch4j {
    outfile = "FilesRenamer.exe"
    bundledJrePath = 'jre'
    jreMinVersion = '17'
    mainClassName = 'com.motompro.filesrenamer.MainKt'
    productName = 'FilesRenamer'
    jarTask = project.tasks.jar
}

tasks.register("packageExecutableDistribution", Zip) {
    archiveFileName = "FilesRenamer-${version}.zip"
    destinationDirectory = file("$buildDir/distExecutable")

    from "$buildDir/launch4j"
}

tasks.register("addJreToDistributable", Copy) {
    from zipTree("jre/windows_jre_17.zip")
    destinationDir = file("$buildDir/launch4j")
}

tasks.named("packageExecutableDistribution").get().dependsOn("createExe")
tasks.named("packageExecutableDistribution").get().dependsOn("addJreToDistributable")

jlink {
    imageZip.set(project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip"))
    options.set(['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--module-path', "${System.getenv("JMOD_HOME")}", "--add-modules", "javafx.controls,javafx.fxml"])
}

jlinkZip {
    group = 'distribution'
}
